const pluginConfig = require('../pluginConfig');
const fs = require('fs');

const autogenerationDisclaimer = `
// THIS FILE IS AUTOGENERATED AS PART OF THE EXTENSION AND MODE PLUGIN PROCESS.
// IT SHOULD NOT BE MODIFIED MANUALLY \n`;

function constructLines(input, categoryName) {
  let pluginCount = 0;

  const lines = [];

  if (!input) return lines;

  input.forEach(entry => {
    const packageName = (typeof entry === 'string') ?
      entry : entry.packageName;

    lines.push(`${categoryName}.push('${packageName}')`);
  });

  return lines;
}

function getFormattedImportBlock(importLines) {
  let content = '';
  // Imports
  importLines.forEach(importLine => {
    content += importLine;
  });

  return content;
}

const staticBlock = [
  "import umdLoader from './umdLoader';",
  "export const defaultModes = [];",
  "window.modes = defaultModes;",
  "export const defaultExtensions = [];",
  "window.extensions = defaultExtensions;",
  "export const defaultHotLoad = [];\n",
  "// Loads the default hot load list, and waits for any hot load functions",
  "const pluginImports = (hotLoad = defaultHotLoad) =>",
  "  Promise.all(hotLoad.map(it => umdLoader(it))).then(loaded => loaded.map(",
  "    it => it?.hotLoad?.() ) )",
  "export default pluginImports;\n"
];


const createCopyPluginFromExtensions = (directory, copyItems, directories) => {
  const from = `${directory}/public/`;
  if (fs.existsSync(from)) {
    copyItems.push({
      from,
      to: resolveDirectory('DIST', '.', directories),
      toType: 'dir',
    });
  }
}

const resolveDirectory = (relativeTo, directory, directories) => {
  if (relativeTo) {
    const relative = directories[relativeTo];
    if (!relative) {
      throw new Error(`Couldn't find relativeTo path ${relativeTo}`);
    }

    const rootDirectory = (typeof relative === 'string') ?
      relative :
      resolveDirectory(relative.relativeTo, relative.directory, directories);
    if (directory === '.') return rootDirectory;
    return `${rootDirectory}/${directory}`;
  }
  return directory;
}

const createImportItem = (item, importerLines, lines, copyItems, directories) => {
  const useItem = (typeof item === 'string') ? { packageName: item } : item;
  const { directory, link, relativeTo, packageName, hot } = useItem;
  const linkDirectory = resolveDirectory('VIEWER', `node_modules/${packageName}`, directories);
  const rootDirectory = resolveDirectory('OHIF', `node_modules/${packageName}`, directories);;
  if (directory && !link) {
    // This is an external directory item
    const location = resolveDirectory(relativeTo, directory, directories);
    if (!location) {
      console.log("UMD module", item.packageName, "in", directory, "not included");
      return;
    }
    createCopyPluginFromExtensions(location, copyItems, directories);
  } else if (fs.existsSync(linkDirectory)) {
    createCopyPluginFromExtensions(linkDirectory, copyItems, directories);
    importerLines.push(`  if( name==='${packageName}') return import('${packageName}')`);
  } else if (fs.existsSync(rootDirectory)) {
    createCopyPluginFromExtensions(rootDirectory, copyItems, directories);
    importerLines.push(`  if( name==='${packageName}') return import('${packageName}')`);
  } else {
    const msg = `No package or link directory found for ${packageName}, tried: ${linkDirectory} and ${rootDirectory}`;
    throw new Error(msg);
  }

  if (hot) {
    lines.push(`defaultHotLoad.push('${packageName}');`)
  }
}

/** Returns the copy plugin from extensions list, and adds the
 * lines directly to lines
 */
const createImporter = (pluginConfig, lines) => {
  const { extensions, modes, packages = [], directories = {} } = pluginConfig;
  const copyPlugin = [];
  const importerLines = ["umdLoader.registerImport(name => {"];

  extensions.forEach(item => createImportItem(item, importerLines, lines, copyPlugin, directories));
  modes.forEach(item => createImportItem(item, importerLines, lines, copyPlugin, directories));
  packages.forEach(item => createImportItem(item, importerLines, lines, copyPlugin, directories));

  importerLines.push("});");
  lines.push('', '// Importer Definition', ...importerLines);

  return copyPlugin;
}

// Some global information about the overall deployment

function writePluginImportsFile(SRC_DIR, DIST_DIR) {
  if (!pluginConfig.directories) pluginConfig.directories = {};
  const { directories = {} } = pluginConfig;
  directories.VIEWER = `${SRC_DIR}/..`;
  directories.OHIF = `${SRC_DIR}/../../..`;
  directories.DIST = DIST_DIR;

  const lines = [];
  lines.push(autogenerationDisclaimer);
  lines.push(...staticBlock);
  lines.push('', '// Extension Imports');
  lines.push(...constructLines(pluginConfig.extensions, 'defaultExtensions'));
  lines.push('', '// Modes Imports');
  lines.push(...constructLines(pluginConfig.modes, 'defaultModes'));
  lines.push('');
  const copyPluginFromExtensions = createImporter(pluginConfig, lines);
  lines.push('', '// Webpack Copy block')
  lines.push('const webpackCopy=', JSON.stringify(copyPluginFromExtensions, null, 2));

  fs.writeFileSync(
    `${SRC_DIR}/pluginImports.js`,
    lines.join('\n'),
    { flag: 'w+' },
    err => {
      if (err) {
        console.error(err);
        return;
      }
    }
  );

  return copyPluginFromExtensions;
}

module.exports = writePluginImportsFile;
